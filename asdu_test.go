package iec104

import (
	"testing"
)

func TestASDU_ParseASDU(t *testing.T) {
	type fields struct {
		TypeID        byte
		Length        byte
		Cause         uint16
		PublicAddress uint16
	}
	type args struct {
		asduBytes []byte
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		wantErr bool
	}{
		{"测试不带游标的单点遥信(MSpNa1)，sq=false,type_id=1", fields{}, args{asduBytes: []byte{0x01, 0x3C, 0x03, 0x00, 0x01, 0x00, 0xE7, 0x01, 0x00, 0x01, 0xE8, 0x01, 0x00, 0x01, 0xE9, 0x01, 0x00, 0x01, 0xEA, 0x01, 0x00, 0x01, 0xEB, 0x01, 0x00, 0x01, 0xEC, 0x01, 0x00, 0x01, 0xED, 0x01, 0x00, 0x01, 0xEE, 0x01, 0x00, 0x01, 0xEF, 0x01, 0x00, 0x01, 0xF0, 0x01, 0x00, 0x01, 0xF1, 0x01, 0x00, 0x01, 0xF2, 0x01, 0x00, 0x01, 0xF3, 0x01, 0x00, 0x01, 0xF4, 0x01, 0x00, 0x01, 0xF5, 0x01, 0x00, 0x01, 0xF6, 0x01, 0x00, 0x01, 0xF7, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x68, 0xFA, 0x02, 0x00, 0x00, 0x00, 0x01, 0x3C, 0x03, 0x00, 0x01, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00, 0x00, 0x3B, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x4F, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x5B, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x00, 0x00, 0x5D, 0x00, 0x00, 0x00, 0x5E, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x68, 0xFA, 0x04, 0x00, 0x00, 0x00, 0x01, 0x3C, 0x03, 0x00, 0x01, 0x00, 0x68, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x00, 0x00, 0x6B, 0x00, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x6F, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00, 0x7A, 0x00, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x8A, 0x00, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x00, 0x8D, 0x00, 0x00, 0x00, 0x8E, 0x00, 0x00, 0x00, 0x8F, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x93, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x9A, 0x00, 0x00, 0x00, 0x9B, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x9D, 0x00, 0x00, 0x00, 0x9E, 0x00, 0x00, 0x00, 0x9F, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0xA1, 0x00, 0x00, 0x00, 0xA2, 0x00, 0x00, 0x00, 0xA3, 0x00, 0x00, 0x00, 0x68, 0xFA, 0x06, 0x00, 0x00, 0x00, 0x01, 0x3C, 0x03, 0x00, 0x01, 0x00, 0xA4, 0x00, 0x00, 0x00, 0xA5, 0x00, 0x00, 0x00, 0xA6, 0x00, 0x00, 0x00, 0xA7, 0x00, 0x00, 0x00, 0xA8, 0x00, 0x00, 0x00, 0xA9, 0x00, 0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0xAB, 0x00, 0x00, 0x00, 0xAC, 0x00, 0x00, 0x00, 0xAD, 0x00, 0x00, 0x00, 0xAE, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0xB1, 0x00, 0x00, 0x00, 0xB2, 0x00, 0x00, 0x00, 0xB3, 0x00, 0x00, 0x00, 0xB4, 0x00, 0x00, 0x00, 0xB5, 0x00, 0x00, 0x00, 0xB6, 0x00, 0x00, 0x00, 0xB7, 0x00, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00, 0xB9, 0x00, 0x00, 0x00, 0xBA, 0x00, 0x00, 0x00, 0xBB, 0x00, 0x00, 0x00, 0xBC, 0x00, 0x00, 0x00, 0xBD, 0x00, 0x00, 0x00, 0xBE, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00, 0xC2, 0x00, 0x00, 0x00, 0xC3, 0x00, 0x00, 0x00, 0xC4, 0x00, 0x00, 0x00, 0xC5, 0x00, 0x00, 0x00, 0xC6, 0x00, 0x00, 0x00, 0xC7, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0xC9, 0x00, 0x00, 0x00, 0xCA, 0x00, 0x00, 0x00, 0xCB, 0x00, 0x00, 0x00, 0xCC, 0x00, 0x00, 0x00, 0xCD, 0x00, 0x00, 0x00, 0xCE, 0x00, 0x00, 0x00, 0xCF, 0x00, 0x00, 0x00, 0xD0, 0x00, 0x00, 0x00, 0xD1, 0x00, 0x00, 0x00, 0xD2, 0x00, 0x00, 0x00, 0xD3, 0x00, 0x00, 0x00, 0xD4, 0x00, 0x00, 0x00, 0xD5, 0x00, 0x00, 0x00, 0xD6, 0x00, 0x00, 0x00, 0xD7, 0x00, 0x00, 0x00, 0xD8, 0x00, 0x00, 0x00, 0xD9, 0x00, 0x00, 0x00, 0xDA, 0x00, 0x00, 0x00, 0xDB, 0x00, 0x00, 0x00, 0xDC, 0x00, 0x00, 0x00, 0xDD, 0x00, 0x00, 0x00, 0xDE, 0x00, 0x00, 0x00, 0xDF, 0x00, 0x00, 0x00, 0x68, 0xFA, 0x08, 0x00, 0x00, 0x00, 0x01, 0x3C, 0x03, 0x00, 0x01, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE1, 0x00, 0x00, 0x00, 0xE2, 0x00, 0x00, 0x00, 0xE3, 0x00, 0x00, 0x00, 0xE4, 0x00, 0x00, 0x00, 0xE5, 0x00, 0x00, 0x00, 0xE6, 0x00, 0x00, 0x00, 0xE7, 0x00, 0x00, 0x00, 0xE8, 0x00, 0x00, 0x00, 0xE9, 0x00, 0x00, 0x00, 0xEA, 0x00, 0x00, 0x00, 0xEB, 0x00, 0x00, 0x00, 0xEC, 0x00, 0x00, 0x00, 0xED, 0x00, 0x00, 0x00, 0xEE, 0x00, 0x00, 0x00, 0xEF, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF1, 0x00, 0x00, 0x00, 0xF2, 0x00, 0x00, 0x00, 0xF3, 0x00, 0x00, 0x00, 0xF4, 0x00, 0x00, 0x00, 0xF5, 0x00, 0x00, 0x00, 0xF6, 0x00, 0x00, 0x00, 0xF7, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0xF9, 0x00, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0xFB, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0xFD, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x06, 0x01, 0x00, 0x00, 0x07, 0x01, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x09, 0x01, 0x00, 0x00, 0x0A, 0x01, 0x00, 0x00, 0x0B, 0x01, 0x00, 0x00, 0x0C, 0x01, 0x00, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x0E, 0x01, 0x00, 0x00, 0x0F, 0x01, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x11, 0x01, 0x00, 0x00, 0x12, 0x01, 0x00, 0x00, 0x13, 0x01, 0x00, 0x00, 0x14, 0x01, 0x00, 0x00, 0x15, 0x01, 0x00, 0x00, 0x16, 0x01, 0x00, 0x00, 0x17, 0x01, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x19, 0x01, 0x00, 0x00, 0x1A, 0x01, 0x00, 0x00, 0x1B, 0x01, 0x00, 0x00}}, false},
		{"测试带品质描述的测量值(MMeNa1)，sq=false,type_id=9", fields{}, args{asduBytes: []byte{0x09, 0x14, 0x03, 0x00, 0x01, 0x00, 0x79, 0x40, 0x00, 0x2d, 0x01, 0x00, 0x7a, 0x40, 0x00, 0x94, 0x75, 0x00, 0x7b, 0x40, 0x00, 0x94, 0x75, 0x00, 0x7c, 0x40, 0x00, 0x94, 0x75, 0x00, 0x7d, 0x40, 0x00, 0x94, 0x75, 0x00, 0x7e, 0x40, 0x00, 0x2d, 0x01, 0x00, 0x7f, 0x40, 0x00, 0x2d, 0x01, 0x00, 0x80, 0x40, 0x00, 0x94, 0x75, 0x00, 0x81, 0x40, 0x00, 0x94, 0x75, 0x00, 0x82, 0x40, 0x00, 0x94, 0x75, 0x00, 0x83, 0x40, 0x00, 0x94, 0x75, 0x00, 0x84, 0x40, 0x00, 0x2d, 0x01, 0x00, 0x85, 0x40, 0x00, 0x2d, 0x01, 0x00, 0x86, 0x40, 0x00, 0x94, 0x75, 0x00, 0x87, 0x40, 0x00, 0x94, 0x75, 0x00, 0x88, 0x40, 0x00, 0x94, 0x75, 0x00, 0x89, 0x40, 0x00, 0x94, 0x75, 0x00, 0x8a, 0x40, 0x00, 0x2d, 0x01, 0x00, 0x8b, 0x40, 0x00, 0x2d, 0x01, 0x00, 0x8c, 0x40, 0x00, 0x94, 0x75, 0x00}}, false},
		{"测试带游标的单点遥信(MSpTb1)，sq=false,type_id=30", fields{}, args{asduBytes: []byte{0x1e, 0x14, 0x03, 0x00, 0x01, 0x00, 0x40, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x41, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x42, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x43, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x44, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x45, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x46, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x47, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x48, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x49, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x4A, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x4B, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x4C, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x4D, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x4E, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x4F, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x50, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x51, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x52, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x53, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x68, 0xE6, 0x16, 0x00, 0x00, 0x00, 0x1E, 0x14, 0x03, 0x00, 0x01, 0x00, 0x54, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x55, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x56, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x57, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x58, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x59, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x5A, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x5B, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x5C, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x5D, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x5E, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x5F, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x60, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x61, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x62, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x63, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x64, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x65, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x66, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13, 0x67, 0x00, 0x00, 0x00, 0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13}}, false},
		{"测试连续不带游标的单点遥信(MSpNa1)，sq=true,type_id=1", fields{}, args{asduBytes: []byte{0x01, 0xFF, 0x14, 0x00, 0x01, 0x00, 0xFF, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01}}, false},
		{"测试连续不带时标的双点遥信(MDpNa1)，sq=true,type_id=3", fields{}, args{asduBytes: []byte{0x03, 0xff, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x02, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x81, 0x81, 0x81, 0x81, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x01, 0x01, 0x02, 0x02, 0x01, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x81, 0x81, 0x81, 0x81, 0x01, 0x01, 0x01, 0x01}}, false},
		{"测试连续单点遥测(MMeNa1)，sq=true,type_id=9", fields{}, args{asduBytes: []byte{0x09, 0xBC, 0x14, 0x00, 0x01, 0x00, 0x51, 0x40, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0xF4, 0x00, 0x00, 0xF4, 0x00, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0xF4, 0x00, 0x00, 0xF4, 0x00, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0xF4, 0x00, 0x00, 0xF4, 0x00, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0xF4, 0x00, 0x00, 0xF4, 0x00, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0xF4, 0x00, 0x00, 0xF4, 0x00, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0xF4, 0x00, 0x00, 0xF4, 0x00, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0xF4, 0x00, 0x00, 0xF4, 0x00, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0xF4, 0x00, 0x00, 0xF4, 0x00, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0xF4, 0x00, 0x00, 0xF4, 0x00, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0x50, 0x5F, 0x00, 0xF4, 0x00, 0x00, 0xF4, 0x00, 0x00, 0x50, 0x5F, 0x00}}, false},
		{"测试连续带品质描述的浮点值(MMeNc1)，sq=true,type_id=13", fields{}, args{asduBytes: []byte{0x0d, 0xb0, 0x14, 0x00, 0x01, 0x00, 0x61, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x3f, 0x00, 0x00, 0x80, 0xac, 0x3f, 0x00, 0x00, 0x00, 0xb4, 0x3f, 0x00, 0x9a, 0x99, 0x19, 0x3a, 0x00, 0x9a, 0x99, 0x19, 0x3a, 0x00, 0x9a, 0x99, 0x19, 0x30, 0x0, 0x00, 0x00, 0x70, 0x3d, 0x00, 0x00, 0x00, 0x70, 0x3d, 0x00, 0x00, 0x60, 0x1f, 0x41, 0x00, 0x00, 0x00, 0x2f, 0x41, 0x00, 0x00, 0x60, 0x01, 0x3f, 0x00, 0x00, 0x00, 0xcf, 0x3d, 0x00, 0x00, 0x40, 0x1b, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x80, 0x3b, 0x40, 0x00, 0x00, 0x40, 0x03, 0x40, 0x00, 0x00, 0xc0, 0x28, 0x40, 0x00, 0x9a, 0x99, 0x19, 0x3a, 0x00, 0x9a, 0x99, 0x19, 0x3a, 0x00, 0x9a, 0x99, 0x19, 0x3a, 0x00, 0x00, 0x00, 0x70, 0x3d, 0x00, 0x00, 0x00, 0x70, 0x3d, 0x00, 0x00, 0x60, 0x38, 0x41, 0x00, 0x00, 0xa0, 0x25, 0x41, 0x00, 0x00, 0xe0, 0x68, 0x3f, 0x00, 0x00, 0x40, 0x1b, 0x3f, 0x00, 0x00, 0x40, 0x9b, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}}, false},
		{"测试连续遥脉电度值(MItNa1)，sq=true,type_id=15", fields{}, args{asduBytes: []byte{0x0f, 0xb0, 0x25, 0x00, 0x01, 0x00, 0x01, 0x64, 0x00, 0xfe, 0x12, 0x00, 0x00, 0x03, 0x68, 0x03, 0x00, 0x00, 0x03, 0xe4, 0x11, 0x00, 0x00, 0x03, 0x0f, 0x06, 0x00, 0x00, 0x03, 0xfe, 0x12, 0x00, 0x00, 0x03, 0x69, 0x03, 0x00, 0x00, 0x03, 0xe4, 0x11, 0x00, 0x00, 0x03, 0x10, 0x06, 0x00, 0x00, 0x03, 0xeb, 0x1a, 0x00, 0x00, 0x03, 0xce, 0x04, 0x00, 0x00, 0x03, 0xf6, 0x18, 0x00, 0x00, 0x03, 0x4a, 0x04, 0x00, 0x00, 0x03, 0xec, 0x1a, 0x00, 0x00, 0x03, 0xd1, 0x04, 0x00, 0x00, 0x03, 0xfa, 0x18, 0x00, 0x00, 0x03, 0xf8, 0x08, 0x00, 0x00, 0x03, 0x8a, 0x1b, 0x00, 0x00, 0x03, 0x17, 0x03, 0x00, 0x00, 0x03, 0xc9, 0x27, 0x00, 0x00, 0x03, 0xc8, 0x02, 0x00, 0x00, 0x03, 0xc3, 0x18, 0x00, 0x00, 0x03, 0x17, 0x03, 0x00, 0x00, 0x03, 0xcf, 0x27, 0x00, 0x00, 0x03, 0xc8, 0x02, 0x00, 0x00, 0x03, 0xb5, 0x1b, 0x00, 0x00, 0x03, 0x16, 0x03, 0x00, 0x00, 0x03, 0xef, 0x2d, 0x00, 0x00, 0x03, 0xc8, 0x02, 0x00, 0x00, 0x03, 0xb6, 0x1b, 0x00, 0x00, 0x03, 0x16, 0x03, 0x00, 0x00, 0x03, 0xf1, 0x2d, 0x00, 0x00, 0x03, 0xc8, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x00, 0x83}}, false},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			asdu := &ASDU{
				TypeID:        tt.fields.TypeID,
				Length:        tt.fields.Length,
				Cause:         tt.fields.Cause,
				PublicAddress: tt.fields.PublicAddress,
			}
			if _, err := asdu.ParseASDU(tt.args.asduBytes); (err != nil) != tt.wantErr {
				t.Errorf("ASDU.ParseASDU() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestASDU_ParseTime(t *testing.T) {
	type fields struct {
		TypeID        byte
		Length        byte
		Cause         uint16
		PublicAddress uint16
		Ts            float64
	}
	type args struct {
		asduBytes []byte
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   float64
	}{
		{"测试7字节时间解析", fields{}, args{asduBytes: []byte{0xD3, 0x42, 0x3B, 0x0E, 0x06, 0x0B, 0x13}}, 1573023557.107},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			asdu := &ASDU{
				TypeID:        tt.fields.TypeID,
				Length:        tt.fields.Length,
				Cause:         tt.fields.Cause,
				PublicAddress: tt.fields.PublicAddress,
				Ts:            tt.fields.Ts,
			}
			if got := asdu.ParseTime(tt.args.asduBytes); got != tt.want {
				t.Errorf("ASDU.ParseTime() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestASDU_ParseVariable(t *testing.T) {
	type fields struct {
		TypeID        byte
		Sequence      bool
		Length        byte
		Cause         uint16
		PublicAddress uint16
		Ts            float64
	}
	type args struct {
		b byte
	}
	tests := []struct {
		name       string
		fields     fields
		args       args
		wantSq     bool
		wantLength byte
	}{
		{"测试可变结构限定词1", fields{}, args{byte(255)}, true, 127},
		{"测试可变结构限定词2", fields{}, args{0x82}, true, 2},
		{"测试可变结构限定词3", fields{}, args{byte(188)}, true, 60},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			asdu := &ASDU{
				TypeID:        tt.fields.TypeID,
				Sequence:      tt.fields.Sequence,
				Length:        tt.fields.Length,
				Cause:         tt.fields.Cause,
				PublicAddress: tt.fields.PublicAddress,
				Ts:            tt.fields.Ts,
			}
			gotSq, gotLength := asdu.ParseVariable(tt.args.b)
			if gotSq != tt.wantSq {
				t.Errorf("ASDU.ParseVariable() gotSq = %v, want %v", gotSq, tt.wantSq)
			}
			if gotLength != tt.wantLength {
				t.Errorf("ASDU.ParseVariable() gotLength = %v, want %v", gotLength, tt.wantLength)
			}
		})
	}
}
